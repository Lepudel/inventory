
import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";
import font from "./fonts/Roboto-Regular-normal.js"; // –ø–æ–¥–∫–ª—é—á—ë–Ω –∫–∞–∫ VFS

const PDFGenerator = (cartItems, userName, projectName, deliveryDate, returnDate) => {
  try {
    if (!Array.isArray(cartItems) || cartItems.length === 0) {
      alert("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã");
      return;
    }

    const doc = new jsPDF();

    // üî• 1. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —à—Ä–∏—Ñ—Ç–∞
    doc.addFileToVFS("Roboto-Regular.ttf", font);
    doc.addFont("Roboto-Regular.ttf", "Roboto", "normal");
    doc.setFont("Roboto");

    doc.setFontSize(16);
    doc.text("–ü–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Ç–≥—Ä—É–∑–∫—É", 14, 20);

    const headers = [["ID", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–ö–æ–ª-–≤–æ"]];
    const data = cartItems.map((item) => [
      String(item.id ?? ""),
      String(item.name ?? ""),
      String(item.quantity ?? "")
    ]);

    autoTable(doc, {
      head: headers,
      body: data,
      startY: 30,
    });

    const endY = doc.autoTable.previous.finalY || 40;

    doc.setFontSize(12);
    doc.text(`–ó–∞–∫–∞–∑–∞–ª: ${userName || "-"}`, 14, endY + 10);
    doc.text(`–ü—Ä–æ–µ–∫—Ç: ${projectName || "-"}`, 14, endY + 20);
    doc.text(`–°—Ä–æ–∫: ${deliveryDate || "-"} ‚Äî ${returnDate || "-"}`, 14, endY + 30);

    doc.save("order.pdf");
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF:", error);
    alert("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å PDF");
  }
};

export default PDFGenerator;
